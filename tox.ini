[tox]
envlist =
    lint
    mypy
    pylint
    test-lazy-imports
    coverage_clean
    py{313,312,311,310,39,38}
    py38-mindeps
    coverage_report
    docs
minversion = 4.0.0
labels =
    freezedeps = freezedeps-print,freezedeps-py{313,312,311,310,39,38}

[testenv]
# build a wheel, not a tarball, and use a common env to do it (so that the wheel is shared)
package = wheel
wheel_build_env = build_wheel

deps =
    !mindeps: -r requirements/py{py_dot_ver}/test.txt
    mindeps: -r requirements/py{py_dot_ver}/test-mindeps.txt
commands = coverage run -m pytest {posargs}
depends =
    py{313,312,311,310,39,38}{-mindeps,}: coverage_clean, lint
    coverage_report: py{313,312,311,310,39,38}{-mindeps,}

[testenv:coverage_clean]
deps = coverage
skip_install = true
commands = coverage erase

[testenv:coverage_report]
deps = coverage
skip_install = true
commands_pre = -coverage combine
commands = coverage report --skip-covered

[testenv:lint]
deps = pre-commit
skip_install = true
commands = pre-commit run --all-files

[testenv:mypy{,-test}]
commands_pre =
deps =
    -r requirements/py{py_dot_ver}/typing.txt
commands =
    !test: mypy src/ {posargs}
    test: mypy --show-error-codes --warn-unused-ignores tests/non-pytest/mypy-ignore-tests/

[testenv:test-lazy-imports]
deps = -r requirements/py{py_dot_ver}/test.txt
commands =
    pytest -n auto tests/non-pytest/lazy-imports/
    pytest tests/unit/test_lazy_imports.py

[testenv:pylint]
deps = pylint
commands = pylint {posargs:src/}

[testenv:pyright]
deps = pyright
commands = pyright src/ {posargs}

[testenv:docs]
# force use of py311 for doc builds so that we get the same behaviors as the
# readthedocs doc build
basepython = python3.11
deps = -r requirements/py{py_dot_ver}/docs.txt
allowlist_externals = rm
changedir = docs/
# clean the build dir before rebuilding
commands_pre = rm -rf _build/
commands = sphinx-build -j auto -d _build/doctrees -b html -W . _build/html {posargs}

[testenv:twine-check]
skip_install = true
deps = build
       twine!=5.1.0
allowlist_externals = rm
commands_pre = rm -rf dist/
# check that twine validating package data works
commands = python -m build
           twine check --strict dist/*

[testenv:poetry-check]
skip_install = true
deps = poetry
# remove the dist dir because it can lead to (confusing) spurious failures
allowlist_externals = rm
commands_pre = rm -rf dist/
# use `poetry lock` to ensure that poetry can parse our dependencies
changedir = tests/non-pytest/poetry-lock-test
commands = poetry lock

[testenv:freezedeps-print]
description = print dependency-groups to temporary files for use in pip-compile
skip_install = true
deps = dependency-groups>=1,<2
commands =
    python -m dependency_groups test -o requirements/.test.in
    python -m dependency_groups typing -o requirements/.typing.in
    python -m dependency_groups test-mindeps -o requirements/.test-mindeps.in
    python -m dependency_groups docs -o requirements/.docs.in
[testenv:freezedeps-py{313,312,311,310,39,38}]
description = freeze development dependencies using pip-compile
skip_install = true
setenv =
    CUSTOM_COMPILE_COMMAND=tox p -m freezedeps
change_dir = requirements/
deps = pip-tools
commands =
    pip-compile --strip-extras -q -U --resolver=backtracking .test.in -o py{py_dot_ver}/test.txt
    pip-compile --strip-extras -q -U --resolver=backtracking .typing.in -o py{py_dot_ver}/typing.txt

    # Minimum dependencies are only tested against the lowest supported Python version.
    py38: pip-compile --strip-extras -q -U --resolver=backtracking .test-mindeps.in -o py{py_dot_ver}/test-mindeps.txt

    # The docs requirements are only generated for Python 3.11.
    py311: pip-compile --strip-extras -q -U --resolver=backtracking .docs.in -o py{py_dot_ver}/docs.txt
depends = freezedeps-print

[testenv:check-min-python-is-tested]
description = Check the Requires-Python metadata against CI config
skip_install = true
deps =
    ruamel.yaml<0.18
    mddj==0.0.6
commands = python scripts/ensure_min_python_is_tested.py

[testenv:prepare-release]
skip_install = true
deps = scriv[toml]
commands =
    python changelog.d/check-version-is-new.py
    scriv collect
